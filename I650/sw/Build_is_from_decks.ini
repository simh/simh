
; set console -n log=log.txt 
; set debug -n debug.txt
; set debug stdout
; set cpu debug=cmd;data;detail

; params: %1 %2 ... (case insensitive)

; possible values:
;                    Tr            build include trace deck (deck number 10)
;                    Set_LoopBox   build include set loopbox instruction deck (deck number 21)

; Load soap deck into drum (1 word per card format), but does not execute it

set cpu 2k

att cdr1 -q soap/soapII.dck

echo *** 
echo *** Load soap deck into drum
echo *** 

d csw 7019519999
d ar 8000
go

; Now put bell interpretive system loader source cards in reader and start soap assembler

att cdr1 -q bell/is_sys_load_src.txt 
set cdr1 wiring=soap

att cdp1 -n -q deck_out.dck
set cdp1 echo, print, wiring=soap
att cdp0 -n -q print.txt

echo *** 
echo *** Assemble interpretive system loader 
echo *** 

d ar 1000
go

echo *** 
echo *** Read interpretive system loader into drum
echo *** 

det cdp1
att cdr1 -q deck_out.dck

d csw 7019519999
d ar 8000
go

; Prepare a deck with is main source deck and optional user selected extra decks

carddeck -q join bell/is_main_src.txt as deck_in.dck

:add_extra_decks
if "%1" == "" goto run

if -i "%1" == "TR"    carddeck -q join deck_in.dck bell/is_main_src.txt    as deck_in.dck
if -i "%1" == "LBOX"  carddeck -q join deck_in.dck bell/is_set_loopbox.txt as deck_in.dck

shift
goto add_extra_decks
:run

att cdr1 -q deck_in.dck 
set cdr1 wiring=is

; Execute the loader to read prepared is source deck 

echo *** 
echo *** Run system loader to read prepared is source deck
echo *** 

d ar 0880
go

; Generate a 1-word load card deck with interpretive system, ready to run 

echo *** 
echo *** Run system generation to punch 
echo *** interpretive system main deck (1-word per card)
echo *** 

att cdp1 -n -q bell/is.dck
set cdp1 echo, print, wiring=is

d ar 0801
go

:end

