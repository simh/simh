
; set console -n log=log.txt 
; set debug -n debug.txt
; set debug stdout
; set cpu debug=cmd;data;detail

; params: %1 %2 ... (case insensitive)

; possible values:
;                    Tr            build include trace deck (deck number 10)
;                    Set_LoopBox   build include set loopbox instruction deck (deck number 21)

; Load SOAP deck into core (1 word per card format), but does not execute it

set cpu 2k

att cdr1 -q soapII.dck

echo *** 
echo *** load soap deck into drum
echo *** 

d csw 7019519999
d ar 8000
go

; now put interpretive system loader source cards in reader and start SOAP assembler

att cdr1 is_sys_load_src.txt 
set cdr1 wiring=soap

att cdp1 -n -q deck_out.dck
set cdp1 echo, print, wiring=soap
att cdp0 -n -q print.txt

echo *** 
echo *** Assemble interpretive system loader 
echo *** 

d ar 1000
go

echo *** 
echo *** load interpretive system loader into core
echo *** 

det cdp1
att cdr1 deck_out.dck

d csw 7019519999
d ar 8000
go

; create is deck with main system and optional user selected extra decks

! copy is_main_src.txt deck_in.dck      > nul

:add_extra_decks
if "%1" == "" goto run

set env deck="void"
if -i "%1" == "TR"    set env deck="is_trace_src.txt"
if -i "%1" == "LBOX"  set env deck="is_set_loopbox.txt"
if %deck == "void" goto next_extra

! copy deck_in.dck a.dck               > nul
! copy a.dck + %deck deck_in.dck       > nul
! del a.dck                            > nul

:next_extra
shift
goto add_extra_decks
:run

att cdr1 deck_in.dck 
set cdr1 wiring=is

; execute the loader to create Interpretive system deck

echo *** 
echo *** run system loader 
echo *** 

d ar 0880
go

; generate a 1-word load card deck with whole interpretive system, ready to run 

echo *** 
echo *** run is system generation to create
echo interpretive system (is) 1-word per card load deck
echo *** 

att cdp1 -n -q is.dck
set cdp1 echo, print, wiring=is

d ar 0801
go

:end

